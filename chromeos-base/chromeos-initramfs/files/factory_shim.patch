Index: initramfs/factory_shim/bootstrap.sh
===================================================================
--- initramfs.orig/factory_shim/bootstrap.sh
+++ initramfs/factory_shim/bootstrap.sh
@@ -102,16 +102,20 @@ is_good_rootfs_partition() {
 
 # Look for a device with our GPT ID.
 wait_for_gpt_root() {
-  [ -z "$KERN_ARG_KERN_GUID" ] && return 1
-  log -n "Looking for rootfs using kern_guid [${KERN_ARG_KERN_GUID}]... "
+  [ -z "$KERN_ARG_ROOT" ] && return 1
+  info -n "Looking for rootfs using root_guid [${KERN_ARG_ROOT}]... "
   local try kern_dev kern_num
-  local root_dev root_num
+  local root_dev root_num root_uuid
+  root_uuid=${KERN_ARG_ROOT#*=}
   for try in $(seq 20); do
     log -n ". "
     # crbug.com/463414: when the cgpt supports MTD (cgpt.bin), redirecting its
     # output will get duplicated data.
-    kern_dev="$(cgpt find -1 -u $KERN_ARG_KERN_GUID 2>/dev/null | uniq)"
-    kern_num=${kern_dev##[/a-z]*[/a-z]}
+    root_dev="$(cgpt find -1 -u $root_uuid 2>/dev/null | uniq)"
+    root_num=${root_dev##[/a-z]*[/a-z]}
+    kern_num=$(( root_num-1 ))
+    kern_dev="${root_dev%${root_num}}"
+    export KERN_ARG_KERN_GUID=$(cgpt show -i ${kern_num} -u $kern_dev)
     # The order of offset to try matters.  We have to try +1 before trying -1.
     # The disk layout should look like:
     #   partition 1: stateful partition
@@ -120,15 +124,11 @@ wait_for_gpt_root() {
     #   partition 4: KERN-B  # This is also paired with ROOT-A.
     #   partition 5: ROOT-B  # This is empty.
     # The order trying +1 before trying -1 works for both KERN-A and KERN-B.
-    for offset in 1 -1; do
-      root_num=$(( kern_num + ${offset} ))
-      root_dev="${kern_dev%${kern_num}}${root_num}"
       if [ -b "${root_dev}" ] && is_good_rootfs_partition "${root_dev}"; then
         USB_DEV="${root_dev}"
         log "Found ${USB_DEV}"
         return 0
       fi
-    done
     sleep 1
   done
   log "Failed waiting for device with correct kern_guid."
